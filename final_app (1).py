# -*- coding: utf-8 -*-
"""final app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HM9tBx5DOGkZ8zMFCeFWy_kfpyrE-7bk
"""

import joblib
import streamlit as st
import pandas as pd
import numpy as np

# Load the Linear Regression model and scaler
try:
    model = joblib.load('linear_regression_model.pkl')  # Load Linear Regression model
    scaler = joblib.load('scaler.pkl')  # Load the scaler used during training
except FileNotFoundError as e:
    st.error(f"Error loading model or scaler: {e}")
    model = None
    scaler = None

# Streamlit app
def app():
    st.title("üåü Energy Demand and Load Prediction App")
    st.markdown("""
    This app predicts **total energy demand (load)** based on user inputs.
    It uses a trained Linear Regression model to forecast energy needs and optimize renewable energy integration.
    """)

    # Tabs for Input and Output
    tab1, tab2 = st.tabs(["‚öôÔ∏è Input Features", "üìä Prediction Results"])

    # Input Features Tab
    with tab1:
        st.subheader("Provide the following details:")
        col1, col2 = st.columns(2)

        with col1:
            total_load_forecast = st.slider("Total Load Forecast (MW)", 0.0, 50000.0, value=20000.0, step=100.0)
            renewable_generation = st.slider("Renewable Generation (MW)", 0.0, 50000.0, value=10000.0, step=100.0)
            hour = st.slider("Hour of Day", 0, 23, value=12)

        with col2:
            fossil_generation = st.slider("Fossil Generation (MW)", 0.0, 50000.0, value=15000.0, step=100.0)
            price_actual = st.slider("Price Actual (‚Ç¨/MWh)", 0.0, 500.0, value=50.0, step=1.0)
            price_day_ahead = st.slider("Price Day Ahead (‚Ç¨/MWh)", 0.0, 500.0, value=45.0, step=1.0)
            day_of_week = st.selectbox("Day of Week", options=["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"], index=0)

        month = st.selectbox("Month", options=list(range(1, 13)), format_func=lambda x: f"Month {x}")

        # Summary of input features
        st.markdown("### Summary of Input Features")
        st.write({
            "Total Load Forecast": total_load_forecast,
            "Renewable Generation": renewable_generation,
            "Fossil Generation": fossil_generation,
            "Price Actual": price_actual,
            "Price Day Ahead": price_day_ahead,
            "Hour": hour,
            "Day of Week": day_of_week,
            "Month": month,
        })

    # Prediction Results Tab
    with tab2:
        st.subheader("Results")
        if st.button("Predict Load"):
            if model and scaler:
                # Prepare input data for prediction
                input_data = pd.DataFrame({
                    'total load forecast': [total_load_forecast],
                    'renewable_generation': [renewable_generation],
                    'fossil_generation': [fossil_generation],
                    'price actual': [price_actual],
                    'price day ahead': [price_day_ahead],
                    'hour': [hour],
                    'day_of_week': [day_of_week],
                    'month': [month]
                })

                # Scale the input features using the same scaler
                input_data_scaled = scaler.transform(input_data)

                # Predict load
                predicted_load = model.predict(input_data_scaled)[0]

                st.success(f"Predicted Total Load: {predicted_load:,.2f} MW")
            else:
                st.error("Model or scaler is not loaded. Please ensure the required files are available.")

# Run the app
if __name__ == "__main__":
    app()

!pip install streamlit

