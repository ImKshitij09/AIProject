# -*- coding: utf-8 -*-
"""finall.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HM9tBx5DOGkZ8zMFCeFWy_kfpyrE-7bk
"""

import joblib
import streamlit as st
import pandas as pd

# Load the model and scaler
try:
    model = joblib.load('linear_regression_model.pkl')  # Load the trained Linear Regression model
    scaler = joblib.load('scaler.pkl')  # Load the scaler used during training
except FileNotFoundError:
    st.error("Model or scaler not found. Make sure the files are in the same directory.")
    model = None
    scaler = None

# Streamlit App
st.title("Energy Demand Prediction App")

st.write("""
This app predicts total energy demand based on input features.
It uses a trained Linear Regression model to forecast energy needs.
""")

# Input Fields
st.subheader("Enter Input Features:")

total_load_forecast = st.number_input("Total Load Forecast (MW)", value=20000.0)
renewable_generation = st.number_input("Renewable Generation (MW)", value=10000.0)
fossil_generation = st.number_input("Fossil Generation (MW)", value=15000.0)
price_actual = st.number_input("Price Actual (€/MWh)", value=50.0)
price_day_ahead = st.number_input("Price Day Ahead (€/MWh)", value=45.0)
hour = st.number_input("Hour of the Day (0-23)", min_value=0, max_value=23, value=12)
day_of_week = st.selectbox("Day of Week", ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"])
month = st.selectbox("Month (1-12)", list(range(1, 13)))

# Convert `day_of_week` to a number
day_of_week_mapping = {
    "Monday": 0, "Tuesday": 1, "Wednesday": 2,
    "Thursday": 3, "Friday": 4, "Saturday": 5, "Sunday": 6
}
day_of_week_numeric = day_of_week_mapping[day_of_week]

# Prediction
if st.button("Predict Total Load"):
    if model and scaler:
        # Create a DataFrame for the input
        input_data = pd.DataFrame({
            'total load forecast': [total_load_forecast],
            'renewable_generation': [renewable_generation],
            'fossil_generation': [fossil_generation],
            'price actual': [price_actual],
            'price day ahead': [price_day_ahead],
            'hour': [hour],
            'day_of_week': [day_of_week_numeric],
            'month': [month]
        })

        # Scale the data
        input_data_scaled = scaler.transform(input_data)

        # Predict
        prediction = model.predict(input_data_scaled)[0]

        st.write(f"Predicted Total Load: **{prediction:.2f} MW**")
    else:
        st.error("Model or scaler not loaded. Please check your setup.")


